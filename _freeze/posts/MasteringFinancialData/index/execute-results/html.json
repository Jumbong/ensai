{
  "hash": "ee324e779681c7a2c6fc3dd0a31a465a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Maitrise des données financières avec Python\"\nauthor: \"Jumbong Junior\"\ndate: \"2024-02-12\"\ncategories: [news]\ntoc: true\nnumber-sections: true\n---\n\n# Introduction\n\nLes données financières sont très utilisées dans la filière gestion des risques de l'ENSAI. Avoir rapidement accès est un atout pour les étudiants et les fera gagner du temps. Ces données sont utilisées dans plusieurs cours notamment le cours de séries temporelles, le cours de la théorie de gestion des risques multiples,le cours d'asset pricing, etc.  C'est pourquoi j'ai décidé de partager avec vous quelques astuces pour maitriser les données financières avec Python. Nous utiliserons la librairie `yfinance` pour récupérer les données financières et `pandas` pour les manipuler et `matplotlib` pour les visualiser.\n\n::: {#7df6b831 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport datetime\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```\n:::\n\n\nJ'ai importé la library `datetime` pour manipuler les dataes. Maintenant, nous pouvons importer les données.\n\n# Importer les données\n\n::: {#c1036832 .cell execution_count=2}\n``` {.python .cell-code}\nimport yfinance as yf\n\naapl = yf.download('AAPL', \n                      start='2012-01-01', \n                      end='2024-01-01',)\naapl.head()                    \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r[*********************100%%**********************]  1 of 1 completed\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Adj Close</th>\n      <th>Volume</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2012-01-03</th>\n      <td>14.621429</td>\n      <td>14.732143</td>\n      <td>14.607143</td>\n      <td>14.686786</td>\n      <td>12.433828</td>\n      <td>302220800</td>\n    </tr>\n    <tr>\n      <th>2012-01-04</th>\n      <td>14.642857</td>\n      <td>14.810000</td>\n      <td>14.617143</td>\n      <td>14.765714</td>\n      <td>12.500645</td>\n      <td>260022000</td>\n    </tr>\n    <tr>\n      <th>2012-01-05</th>\n      <td>14.819643</td>\n      <td>14.948214</td>\n      <td>14.738214</td>\n      <td>14.929643</td>\n      <td>12.639425</td>\n      <td>271269600</td>\n    </tr>\n    <tr>\n      <th>2012-01-06</th>\n      <td>14.991786</td>\n      <td>15.098214</td>\n      <td>14.972143</td>\n      <td>15.085714</td>\n      <td>12.771560</td>\n      <td>318292800</td>\n    </tr>\n    <tr>\n      <th>2012-01-09</th>\n      <td>15.196429</td>\n      <td>15.276786</td>\n      <td>15.048214</td>\n      <td>15.061786</td>\n      <td>12.751299</td>\n      <td>394024400</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLe code ci-dessus utilise la fonction `download`de la librairir `yfinance` pour télécharger les données de la société Apple (AAPL) de 2012 à 2024. De la même manière, vous pouvez télécharger les données d'autres sociétés. Par exemple, pour accèder aux données du CAC40, vous pouvez utiliser le code suivant:\n\n::: {#d6374c66 .cell execution_count=3}\n``` {.python .cell-code}\ncac40 = yf.download('^FCHI', \n                      start='2012-01-01', \n                      end='2024-01-01',)\ncac40.head()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r[*********************100%%**********************]  1 of 1 completed\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Adj Close</th>\n      <th>Volume</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2012-01-03</th>\n      <td>3231.429932</td>\n      <td>3246.739990</td>\n      <td>3193.629883</td>\n      <td>3245.399902</td>\n      <td>3245.399902</td>\n      <td>123415200</td>\n    </tr>\n    <tr>\n      <th>2012-01-04</th>\n      <td>3227.459961</td>\n      <td>3242.840088</td>\n      <td>3186.479980</td>\n      <td>3193.649902</td>\n      <td>3193.649902</td>\n      <td>114040800</td>\n    </tr>\n    <tr>\n      <th>2012-01-05</th>\n      <td>3197.159912</td>\n      <td>3200.149902</td>\n      <td>3136.750000</td>\n      <td>3144.909912</td>\n      <td>3144.909912</td>\n      <td>121161600</td>\n    </tr>\n    <tr>\n      <th>2012-01-06</th>\n      <td>3156.419922</td>\n      <td>3184.379883</td>\n      <td>3122.629883</td>\n      <td>3137.360107</td>\n      <td>3137.360107</td>\n      <td>104492800</td>\n    </tr>\n    <tr>\n      <th>2012-01-09</th>\n      <td>3143.949951</td>\n      <td>3157.310059</td>\n      <td>3114.449951</td>\n      <td>3127.689941</td>\n      <td>3127.689941</td>\n      <td>96976800</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNous savons que pour les données de marché, nous avons les colonnes suivantes: `Open`, `High`, `Low`, `Close`, `Adj Close`, `Volume`. Nous allons maintenant travailler avec la colonne `Close` qui représente le prix de clôture de l'action. Nous pouvons maintenant visualiser les données.\n\n::: {#ff29a894 .cell execution_count=4}\n``` {.python .cell-code}\nplt.figure(figsize=(10, 6))\nplt.plot(aapl['Close'], label='AAPL')\nplt.title('Prix de clôture de l\\'action AAPL')\nplt.xlabel('Date')\nplt.ylabel('Prix de clôture')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=816 height=523}\n:::\n:::\n\n\nCes données ne sont pas stationnaires. Généralement, pour les données financières, nous travaillons avec les rendements car ils sont stationnaires. Si $P_t$ est le prix de l'action à la date $t$, le rendement à la date $t$ est donné par:\n$$\nr_t = \\frac{P_t - P_{t-1}}{P_{t-1}}\n$$\n\nest équivalent à \n\n$$\n\\log\\left(1 + \\frac{P_t - P_{t-1}}{P_{t-1}}\\right) = \\log\\left(\\frac{P_t}{P_{t-1}}\\right)\n$$\n\nDonc nous travaillons avec le logarithme des rendements. Nous pouvons maintenant calculer les rendements. Il existe une fonction `pct_change` dans la librairie `pandas` qui permet de calculer les rendements. Nous allons utiliser cette fonction combinée avec la fonction `log` de la librairie `numpy` pour calculer les logarithmes des rendements du prix de clôture de l'action AAPL.\n\n::: {#81a97838 .cell execution_count=5}\n``` {.python .cell-code}\ndaily_close = aapl[['Close']]\ndaily_close_returns = daily_close.pct_change().apply(lambda x: np.log(1+x))\ndaily_close_returns.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Close</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2012-01-03</th>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2012-01-04</th>\n      <td>0.005360</td>\n    </tr>\n    <tr>\n      <th>2012-01-05</th>\n      <td>0.011041</td>\n    </tr>\n    <tr>\n      <th>2012-01-06</th>\n      <td>0.010400</td>\n    </tr>\n    <tr>\n      <th>2012-01-09</th>\n      <td>-0.001587</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nDans le code ci-dessus nous avons utilisé l'expression ci-dessous pour calculer les rendements:\n$$\n\\log\\left(1 + \\frac{P_t - P_{t-1}}{P_{t-1}}\\right)\n$$\n\n\nNous pouvons plutôt utiliser la fonction `log` de la librairie `numpy` pour calculer les rendements à partir de l'expression ci-dessous:\n$$\n\\log\\left(\\frac{P_t}{P_{t-1}}\\right)\n$$\n\n::: {#8d6d05fd .cell execution_count=6}\n``` {.python .cell-code}\ndaily_close_returns = np.log(daily_close / daily_close.shift(1))\ndaily_close_returns.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Close</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2012-01-03</th>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2012-01-04</th>\n      <td>0.005360</td>\n    </tr>\n    <tr>\n      <th>2012-01-05</th>\n      <td>0.011041</td>\n    </tr>\n    <tr>\n      <th>2012-01-06</th>\n      <td>0.010400</td>\n    </tr>\n    <tr>\n      <th>2012-01-09</th>\n      <td>-0.001587</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNous avons les mêmes résultats avec la première valeur qui est `NaN`. Nous pouvons supprimer cette valeur.\n\n::: {#6fa660c8 .cell execution_count=7}\n``` {.python .cell-code}\ndaily_close_returns = daily_close_returns.dropna()\ndaily_close_returns.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Close</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2012-01-04</th>\n      <td>0.005360</td>\n    </tr>\n    <tr>\n      <th>2012-01-05</th>\n      <td>0.011041</td>\n    </tr>\n    <tr>\n      <th>2012-01-06</th>\n      <td>0.010400</td>\n    </tr>\n    <tr>\n      <th>2012-01-09</th>\n      <td>-0.001587</td>\n    </tr>\n    <tr>\n      <th>2012-01-10</th>\n      <td>0.003574</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNous pouvons maintenant visualiser les rendements.\n\n::: {#e4cbea2f .cell execution_count=8}\n``` {.python .cell-code}\ndaily_close_returns.plot(figsize=(10, 6))\nplt.title('Logarithme des rendements du prix de clôture de l\\'action AAPL')\nplt.xlabel('Date')\nplt.ylabel('Logarithme des rendements')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-9-output-1.png){width=832 height=488}\n:::\n:::\n\n\nSi vous voulez, vous pouvez étudier les statistiques descriptives des rendements. Une fonction que j'adore qui donne les statistiques sommaire est la fonction `describe` de la librairie `pandas`.\n\n::: {#f0b44a58 .cell execution_count=9}\n``` {.python .cell-code}\ndaily_close_returns.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Close</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>3017.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>0.000853</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.017967</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>-0.137708</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>-0.007562</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>0.000765</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>0.010275</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>0.113157</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNous pouvons aussi rééchantillonner les données pour avoir les log rendements minimums, maximums, moyens, etc. par semaine, par mois, par trimestre,etc. Par exemple pour avoir les log rendements moyens par semaine, nous pouvons utliser la fonction `resample` de la librairie `pandas` combinée avec la fonction `mean` pour avoir les moyennes.\n\n::: {#bc708f51 .cell execution_count=10}\n``` {.python .cell-code}\nweekly = daily_close_returns.resample('W').mean()\nweekly.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Close</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2012-01-08</th>\n      <td>0.008933</td>\n    </tr>\n    <tr>\n      <th>2012-01-15</th>\n      <td>-0.001230</td>\n    </tr>\n    <tr>\n      <th>2012-01-22</th>\n      <td>0.000292</td>\n    </tr>\n    <tr>\n      <th>2012-01-29</th>\n      <td>0.012443</td>\n    </tr>\n    <tr>\n      <th>2012-02-05</th>\n      <td>0.005469</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nJe vais terminer ce poste par vous montrer comment télécharger les données de plusieurs sociétés. Par exemple, pour télécharger les données de Apple, Microsoft, Google et Amazon, vous pouvez utiliser le code suivant:\n\n::: {#2d377a5b .cell execution_count=11}\n``` {.python .cell-code}\nimport yfinance as yf\ntickers = ['AAPL', 'MSFT', 'GOOGL', 'AMZN']\n\ndef get_data(tickers, startdate, enddate):\n    def data(ticker):\n        return (yf.download(ticker, start=startdate, end=enddate))\n    datas = map(data, tickers)\n    return(pd.concat(datas,keys= tickers, names=['Ticker', 'Date']))\nall_data = get_data(tickers, '2012-01-01', '2024-01-01')\nall_data.head()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r[*********************100%%**********************]  1 of 1 completed\n\r[*********************100%%**********************]  1 of 1 completed\n\r[*********************100%%**********************]  1 of 1 completed\n\r[*********************100%%**********************]  1 of 1 completed\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Close</th>\n      <th>Adj Close</th>\n      <th>Volume</th>\n    </tr>\n    <tr>\n      <th>Ticker</th>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"5\" valign=\"top\">AAPL</th>\n      <th>2012-01-03</th>\n      <td>14.621429</td>\n      <td>14.732143</td>\n      <td>14.607143</td>\n      <td>14.686786</td>\n      <td>12.433828</td>\n      <td>302220800</td>\n    </tr>\n    <tr>\n      <th>2012-01-04</th>\n      <td>14.642857</td>\n      <td>14.810000</td>\n      <td>14.617143</td>\n      <td>14.765714</td>\n      <td>12.500645</td>\n      <td>260022000</td>\n    </tr>\n    <tr>\n      <th>2012-01-05</th>\n      <td>14.819643</td>\n      <td>14.948214</td>\n      <td>14.738214</td>\n      <td>14.929643</td>\n      <td>12.639425</td>\n      <td>271269600</td>\n    </tr>\n    <tr>\n      <th>2012-01-06</th>\n      <td>14.991786</td>\n      <td>15.098214</td>\n      <td>14.972143</td>\n      <td>15.085714</td>\n      <td>12.771560</td>\n      <td>318292800</td>\n    </tr>\n    <tr>\n      <th>2012-01-09</th>\n      <td>15.196429</td>\n      <td>15.276786</td>\n      <td>15.048214</td>\n      <td>15.061786</td>\n      <td>12.751299</td>\n      <td>394024400</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nJ'espère que ce poste vous sera utile. Si vous avez des questions, n'hésitez pas à me contacter si chatgpt ne peut pas vous aider.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}