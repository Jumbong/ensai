{
  "hash": "211cc50143d50bd91361d982fd6bec3c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Simulation de variables aléatoires continues\nauthor: Jumbong Junior\ndate: '`r Sys.Date()`'\ncategories:\n  - news\ntags:\n  - simulation\ntitle-block-banner: false\nhtml:\n  code-fold: true\n---\n\n# Introduction\n\nDans le cadre d'un projet sur la [théorie de copule](http://www.thierry-roncalli.com/download/Lecture-Notes-Copula-Ensai.pdf), je me suis rendu compte que la simulation des variables aléatoires n'est pas si simple que ça. J'ai donc décidé de me pencher sur le sujet. Dans ce papier, nous nous concentrerons sur la simulation d'une variable aléatoire réelle et continue X. Nous utiliserons les atouts du langage de python pour aborder de façon empirique(avec des données observées), de loi d'une variable aléatoire, la loi des grands nombres et le théorème central limite. Je m'inspirerai du livre \"Le Logiciel R: Maîtriser le langage - Effectuer des analyses statistiques\" de Pierre Lafaye de Micheaux, Rémy Drouilhet et Benoit Liquet. Je pense que ce livre est très intéressant pour tout novice en statistique et en programmation. Il est très bien écrit et très pédagogique. Je vous le recommande vivement.\n\n# La base de la simulation : la loi uniforme sur [0, 1]\n\nJe me suis souvent demandé comment, les ordinateurs généraient des nombres aléatoires, et une autre question qui me pertubait était de savoir comment générait-on des nombres aléatoires qui suivent une loi donnée ? C'est cette question est facile, vous verrez que tout se repose sur la loi uniforme. Et savoir simuler une loi uniforme permettra de simuler n'importe quelle loi de variable aléatoire que l'on connaît la fonction de répartition. Je vais vous expliquer pourquoi :\nLa loi uniforme est une loi de probabilités continuent sur l'intervalle [0,1]. Elle est définie par la fonction de répartition suivante : $F(x) = x$ si $x \\in [0, 1]$ et $F(x) = 0$ si $x < 0$ et $F(x) = 1$ si $x > 1$. La densité de probabilité est donnée par $f(x) = 1$ si $x \\in [0, 1]$ et $f(x) = 0$ sinon. De plus, la fonction de répartition est croissante et continue.\n\nMaintenant, Considérons une variable aléatoire continue réelle X c'est à dire définir sur un espace mesurable $(\\Omega, \\mathcal{F}, P)$ à valeur réelle de de fonction de répartition F définie par :\n$$F(x) = P(X \\leq x)$$\n\nUn résultat important en simulation est que la variable aléatoire F(X) suit une loi uniforme. En effet,\n$$P(F(X) \\leq x) = P(X \\leq F^{-1}(x)) = F(F^{-1}(x)) = x$$\n\nCela signifie que l'on peut écrire $F(X)=U$ équivalent à $X=F^{-1}(U)$ où U suit une loi uniforme sur [0, 1]. Cela signifie que si on sait simuler une loi uniforme, on peut simuler n'importe quelle loi de variable aléatoire. C'est ce que nous allons faire dans la suite. \n\n\n# Simulation de la loi uniforme sur [0, 1]\n\nPour simuler une loi uniforme sur [0, 1], nous allons utiliser la fonction `random` du module `random` de python. Cette fonction génère des nombres aléatoires suivant une loi uniforme sur [0, 1]. Nous allons générer 1000Oui  nombres aléatoires suivant une loi uniforme sur [0, 1] et les représenter graphiquement.\n\n::: {#8cc9353c .cell execution_count=1}\n``` {.python .cell-code}\nimport random\nimport matplotlib.pyplot as plt\n\n# Simulation de la loi uniforme sur [0, 1]\nn = 1000\nu = [random.random() for i in range(n)]\n\n# Représentation graphique\nplt.plot(u, 'o', label=\"Loi uniforme sur [0, 1]\")\nplt.title(\"Simulation de la loi uniforme sur [0, 1]\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=571 height=431}\n:::\n:::\n\n\nNous remarquons que les valeurs Sont répartis uniformément sur l'intervalle [0, 1]. Cela signifie que la simulation est correcte. Nous allons maintenant simuler une loi exponentielle de paramètre $\\lambda = 1$.\nSa fonction de répartition est donnée par:\n$$F(x) = 1 - e^{-x}$$\nEt sa fonction inverse est donnée par :\n$$F^{-1}(x) = -\\ln(1-x)$$\n\nNous allons simuler 1000 valeurs de la loi exponentielle de paramètre $\\lambda = 1$ et les représenter graphiquement.\n\n::: {#a1e01e68 .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\n\n# Simulation de la loi exponentielle de paramètre lambda = 1\nx = [-np.log(1 - u[i]) for i in range(n)]\n\n# Représentation graphique\nplt.hist(x, bins=30, density=True, label=\"Loi exponentielle de paramètre lambda = 1\")\nplt.title(\"Simulation de la loi exponentielle de paramètre lambda = 1\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=571 height=432}\n:::\n:::\n\n\nNous remarquons que les valeurs sont bien réparties suivant une loi exponentielle de paramètre $\\lambda = 1$. Nous allons superposer la densité d'une loi exponentielle de paramètres lambda égale à 1 pour montrer à quel point notre simulation est parfaite. \n\n::: {#21e29cb2 .cell execution_count=3}\n``` {.python .cell-code}\nimport scipy.stats as stats\n\n# Représentation graphique\nplt.hist(x, bins=30, density=True, label=\"Loi exponentielle de paramètre lambda = 1\")\nplt.plot(np.linspace(0, 6, 100), stats.expon.pdf(np.linspace(0, 6, 100)), label=\"Densité de la loi exponentielle de paramètre lambda = 1\")\nplt.title(\"Simulation de la loi exponentielle de paramètre lambda = 1\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=571 height=432}\n:::\n:::\n\n\n# Conclusion\n\nDans ce papier, nous avons voulu montrer que simuler une loi continue est facile si l'on connaît sa fonction de répartition,sa fonction inverse et si on sait simuler une loi uniforme. \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}