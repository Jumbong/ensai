{
  "hash": "59e7e44b927142e5326f0d6d993591a7",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Data Schiller : CAPE Ratio'\nauthor: Jumbong Junior\ndate: '2024-11-16'\ncategories:\n  - Market\n  - Stock\nbibliography: references.bib\nnotice: |\n  @KENTON_2023,\n  jivraj2017many\nhtml:\n  code-fold: true\n---\n\n## Introduction\n\nFor our final year project at ENSAI, we embarked on an ambitious endeavor to evaluate the impact of climate change on stock portfolio allocation, utilizing data from the Network for Greening the Financial System (NGFS). The NGFS is a collective of central banks and financial supervisors dedicated to exchanging best practices and fostering the development of environmental and climate risk management within the financial sector. This group provides various models based on climate change scenarios, which project future variables essential for our analysis.\n\nWe decided to focus our research on four countries: the United States, the UK, China, and France. Our objective was to construct a model capable of predicting stock prices in each country under different climate change scenarios, leveraging macroeconomic variables. Due to the lack of direct access to stock prices for all these countries, we adopted a methodology proposed by Robert J. Shiller to find a proxy for stock prices. By predicting this proxy using macroeconomic variables, we aimed to gain insights into future stock prices, which would then inform our portfolio allocation strategy.\n\nAn integral part of our analysis involved the CAPE ratio, developed by economist Robert J. Shiller. The CAPE ratio, or Cyclically Adjusted Price to Earnings ratio, is a valuation measure for stocks. It is calculated by dividing the stock price by the average of the company's earnings over the last ten years, adjusted for inflation. This approach smooths out short-term fluctuations in earnings and provides a more stable measure of a stock's valuation, making it particularly useful for long-term investment decisions. By incorporating the CAPE ratio into our model, we sought to leverage its predictive power to enhance our understanding of how climate change scenarios might influence stock valuations and, consequently, portfolio allocation decisions.\n\n## The Schiller CAPE Ratio\n\nIn 1998, Robert Schiller and John Campell found that long-term equity market returns are not random walks and could be predicted through a measure they constructed: the Cyclically Adjusted Priceâ€“Earnings ratio (CAPE ratio). Schiller and Campbell calculated the CAPE ratio by dividing a long-term index of stock market prices and earnings (the index considered is the S\\&P 500 index) by the average earnings per share of S\\&P 500 companies over the last ten years, with earnings and stock prices measured in real terms. Then\n\n$$\nCAPE_t = \\frac{P_t}{[(EARN_t+EARN_{t-1}+...+EARN_{t-10})/10]}\n$$\n\nWith $P_t$ the real stock market price (adjusted for inflation) and earnings level and $EARN_t$ the average earnings per share of S\\&P 500 companies.\n\nUsing the average earnings over the last ten years instead of the earnings of the current year allows to smooth out the impact of business cycles on the earnings and stock prices.\n\nThe data provided below enables the computation of the CAPE ratio. The consumer price index (CPI) adjusts the stock prices and earnings for inflation, ensuring an accurate measure.\n\n::: {#f9f65b36 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\n# Read Excel file\ndata_schiller = pd.read_excel(\"data/ie_data_Schiller_2023.xls\", sheet_name=\"Data\", header=None)\n\n# Drop the first 7 rows and certain columns\ndata_schiller = data_schiller.drop(data_schiller.index[0:7]).reset_index(drop=True)\ndata_schiller = data_schiller.drop(columns=[1, 14, 16])\n\n# Set column names\ndata_schiller.columns = ['Date', 'S&P Comp', 'Dividend', 'Earnings', 'Consumer Price CPI', \n                             'Date Fraction', 'Long Interest Rate', 'Real price', 'Real Dividend', \n                             'Real Total Return Price', 'Real Earnings','Real TR Scaled Earnings', \n                             'CAPE', 'TR CAPE', 'Excess CAPE Yield', 'Monthly Total Bond Returns', \n                             'Real Total Bond Returns', '10 Years Annualized Stock Real Return', \n                             '10 Years Annualized Bonds Real Return', 'Real 10 Years excess Annualized Returns'\n                          ]\n```\n:::\n\n\n::: {#8c2622db .cell execution_count=2}\n``` {.python .cell-code}\n# Convert columns 2 to 20 to numeric and the Date column to string\ndata_schiller.iloc[:, 1:20] = data_schiller.iloc[:, 1:20].apply(pd.to_numeric, errors='coerce')\ndata_schiller['Date'] = data_schiller['Date'].astype(str)\n\n# Extract year and quarter from the Date, then form a new Date format\nyear = data_schiller['Date'].str.slice(0, 4)\nquarter = data_schiller['Date'].str.slice(5, 7)\ndate = year + \"-\" + quarter + \"-01\"\ndata_schiller['Date'] = pd.to_datetime(date, errors='coerce', format='%Y-%m-%d')\n\n# Drop rows where Date is NA\ndata_schiller = data_schiller.dropna(subset=['Date'])\n\ndata_schiller[['Date', 'S&P Comp', 'Dividend', 'Earnings', 'Consumer Price CPI', \n                             'Real price', 'Real Dividend', \n                             'Real Total Return Price', 'Real Earnings', \n                             'CAPE', '10 Years Annualized Stock Real Return', \n                             \n]].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>S&amp;P Comp</th>\n      <th>Dividend</th>\n      <th>Earnings</th>\n      <th>Consumer Price CPI</th>\n      <th>Real price</th>\n      <th>Real Dividend</th>\n      <th>Real Total Return Price</th>\n      <th>Real Earnings</th>\n      <th>CAPE</th>\n      <th>10 Years Annualized Stock Real Return</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>1871-01-01</td>\n      <td>4.44</td>\n      <td>0.26</td>\n      <td>0.4</td>\n      <td>12.464061</td>\n      <td>109.050018</td>\n      <td>6.385812</td>\n      <td>109.050018</td>\n      <td>9.824326</td>\n      <td>NaN</td>\n      <td>0.130609</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1871-02-01</td>\n      <td>4.5</td>\n      <td>0.26</td>\n      <td>0.4</td>\n      <td>12.844641</td>\n      <td>107.248908</td>\n      <td>6.196604</td>\n      <td>107.765291</td>\n      <td>9.533236</td>\n      <td>NaN</td>\n      <td>0.130858</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1871-03-01</td>\n      <td>4.61</td>\n      <td>0.26</td>\n      <td>0.4</td>\n      <td>13.034972</td>\n      <td>108.266269</td>\n      <td>6.106124</td>\n      <td>109.298845</td>\n      <td>9.394036</td>\n      <td>NaN</td>\n      <td>0.130951</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1871-04-01</td>\n      <td>4.74</td>\n      <td>0.26</td>\n      <td>0.4</td>\n      <td>12.559226</td>\n      <td>115.536124</td>\n      <td>6.337425</td>\n      <td>117.171191</td>\n      <td>9.749884</td>\n      <td>NaN</td>\n      <td>0.122056</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1871-05-01</td>\n      <td>4.86</td>\n      <td>0.26</td>\n      <td>0.4</td>\n      <td>12.273812</td>\n      <td>121.215781</td>\n      <td>6.484795</td>\n      <td>123.479273</td>\n      <td>9.976607</td>\n      <td>NaN</td>\n      <td>0.122638</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe table below shows the statistic descriptif of the CAPE. The mean value is 16.50\n\n::: {#ec3d4b5d .cell execution_count=3}\n``` {.python .cell-code}\ndata_schiller['CAPE'].astype(float).describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\ncount    1713.000000\nmean       17.401851\nstd         7.193108\nmin         4.784241\n25%        11.951097\n50%        16.501404\n75%        21.137767\nmax        44.197940\nName: CAPE, dtype: float64\n```\n:::\n:::\n\n\n::: {#31fefe31 .cell execution_count=4}\n``` {.python .cell-code}\ndata_schiller['logCape'] = np.log(data_schiller['CAPE'].astype(float))\n\n```\n:::\n\n\n### Interpretation of CAPE Ratio\n\nThe CAPE ratio is a ratio of two elements. Mathematically, it is elevated when the stock price is high relative to the average earnings over the last ten years, or conversely, when these average earnings are low compared to the stock price. Hence, it can be viewed as an indicator of the stock market's or a specific company's profitability.\n\nThis ratio was at a record 28 in January 1997, with the only other instance (at that time) of a comparably high ratio occurring in 1929. Shiller and Campbell asserted the ratio was predicting that the real value of the market would be 40% lower in ten years than it was at that time. That forecast proved to be remarkably prescient, as the market crash of 2008 contributed to the S&P 500 plunging 60% from October 2007 to March 2009.\n\nThe CAPE ratio for the S&P 500 climbed steadily in the second decade of this millennium as the economic recovery in the U.S. gathered momentum, and stock prices reached record levels. As of June 2018, the CAPE ratio stood at 33.78, compared with its long-term average of  17.40. The fact that the ratio had previously only exceeded 30 in 1929 and 2000 triggered a raging debate about whether the elevated value of the ratio portends a major market correction, see @fig-cape\n\n::: {#cell-fig-cape .cell execution_count=5}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\nplt.plot(data_schiller['Date'], data_schiller['CAPE'])\n# The vertical line of the max value of the CAPE ratio\nplt.axvline(x=data_schiller['Date'][data_schiller['CAPE'].idxmax()], color='r', linestyle='--')\nplt.title('CAPE Ratio')\nplt.xlabel('Date')\nplt.ylabel('CAPE Ratio')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![CAPE Ratio](schiller_files/figure-html/fig-cape-output-1.png){#fig-cape width=585 height=449}\n:::\n:::\n\n\n## Schillerâ€™s database and methodology\n\nThe Schiller database at our disposal contains monthly U.S. data on 19 variables from 1871 to 2023. These include the $P_t$ value of the S\\&P index, earnings, dividends, the CAPE ratio, the annualized 10-year real return for the equity market and the same for the bond market. The 10 year annualized real return refers to annual returns over the next 10 years either on the stock market or on the bond market. They are observed over 10 years. This variable therefore refers to future or prospective returns. All these variables will be particularly useful in our study.\n\nThe formula for the 10-year annualized real return can be represented as follows:\n$$\nR_{\\text{annualized}} = \\left( \\frac{R_{\\text{t}}}{R_\\text{t+10 year}} \\right)^{\\frac{1}{10}} - 1\n$$\n\nWith $R_t$ the real total return price at the time t and $R_{t+10 year}$ the real total return price at the time t+10 years.\n\n\nSchiller and Campbell adopt a methodology to relate the CAPE ratio to the level of forward equity market returns.\n\nShillerâ€™s CAPE methodology regresses the forward\n10-year annualized real stock return ($RET_t$) on the current value of the CAPE ratio, over 1881â€“2004. They found:\n\n::: {#84d9d143 .cell execution_count=6}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\n\n# choose data from 1881 to 2004\nsample_train = (data_schiller['Date'] >= '1881-01-01') & (data_schiller['Date'] <= '2004-12-31')\ntrain_schiller = data_schiller[sample_train]\n\ntest_schiller = data_schiller[~sample_train]\ntrain_schiller['logCape'] = pd.to_numeric(train_schiller['logCape'], errors='coerce')\ntrain_schiller['10 Years Annualized Stock Real Return'] = pd.to_numeric(train_schiller['10 Years Annualized Stock Real Return'], errors='coerce')\n\n# Dropping rows with NaN values after the conversion (if any)\ntrain_schiller = train_schiller.dropna(subset=['logCape', '10 Years Annualized Stock Real Return'])\n\nmodel = smf.ols(formula='Q(\"10 Years Annualized Stock Real Return\") ~ logCape', data=train_schiller).fit()\n\n\n# Display the summary of the regression\nprint(model.summary())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                        OLS Regression Results                                        \n======================================================================================================\nDep. Variable:     Q(\"10 Years Annualized Stock Real Return\")   R-squared:                       0.352\nModel:                                                    OLS   Adj. R-squared:                  0.352\nMethod:                                         Least Squares   F-statistic:                     808.8\nDate:                                        Mon, 08 Apr 2024   Prob (F-statistic):          2.05e-142\nTime:                                                01:59:26   Log-Likelihood:                 2599.8\nNo. Observations:                                        1488   AIC:                            -5196.\nDf Residuals:                                            1486   BIC:                            -5185.\nDf Model:                                                   1                                         \nCovariance Type:                                    nonrobust                                         \n==============================================================================\n                 coef    std err          t      P>|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept      0.2791      0.008     36.641      0.000       0.264       0.294\nlogCape       -0.0794      0.003    -28.440      0.000      -0.085      -0.074\n==============================================================================\nOmnibus:                       19.658   Durbin-Watson:                   0.012\nProb(Omnibus):                  0.000   Jarque-Bera (JB):               16.654\nSkew:                          -0.192   Prob(JB):                     0.000242\nKurtosis:                       2.653   Cond. No.                         21.5\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\johns\\AppData\\Local\\Temp\\ipykernel_17472\\80514701.py:10: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  train_schiller['logCape'] = pd.to_numeric(train_schiller['logCape'], errors='coerce')\nC:\\Users\\johns\\AppData\\Local\\Temp\\ipykernel_17472\\80514701.py:11: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  train_schiller['10 Years Annualized Stock Real Return'] = pd.to_numeric(train_schiller['10 Years Annualized Stock Real Return'], errors='coerce')\n```\n:::\n:::\n\n\n$$\n\\mathrm{RET}_t=0.28 - 0.08 \\log \\left(\\mathrm{CAPE}_t\\right)+\\varepsilon_t,  \\quad R^2=0.35\n$$\n\nWe acknowledge the following concerns :\n- Endogeneity of regressor : Whereby price appears in the both sides of the equation, therery violating the assumption of 1. \n- Induced autocorrelation : The residuals are not independent, they are correlated because using the overlapping observations.\n\nWe will use one of those corrections :\n- Hansen - Hodrick\n- Newey - West\n- Cochrane - Orcutt\n- Hjalmarsson  \n\nLess use the Newey - West correction.\n\n::: {#7fb34488 .cell execution_count=7}\n``` {.python .cell-code}\nimport statsmodels.formula.api as smf\n\n# Ensure your DataFrame 'train_schiller' is prepared and available\ntrain_schiller = train_schiller.dropna(subset=['logCape', '10 Years Annualized Stock Real Return'])\n\n# Define and fit the model with Newey-West correction\nmodel = smf.ols(formula='Q(\"10 Years Annualized Stock Real Return\") ~ logCape', data=train_schiller).fit(cov_type='HAC', cov_kwds={'maxlags':1})\n\n# Display the summary of the regression with corrected standard errors\nprint(model.summary())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                        OLS Regression Results                                        \n======================================================================================================\nDep. Variable:     Q(\"10 Years Annualized Stock Real Return\")   R-squared:                       0.352\nModel:                                                    OLS   Adj. R-squared:                  0.352\nMethod:                                         Least Squares   F-statistic:                     653.9\nDate:                                        Mon, 08 Apr 2024   Prob (F-statistic):          7.96e-120\nTime:                                                01:59:26   Log-Likelihood:                 2599.8\nNo. Observations:                                        1488   AIC:                            -5196.\nDf Residuals:                                            1486   BIC:                            -5185.\nDf Model:                                                   1                                         \nCovariance Type:                                          HAC                                         \n==============================================================================\n                 coef    std err          z      P>|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept      0.2791      0.009     32.091      0.000       0.262       0.296\nlogCape       -0.0794      0.003    -25.571      0.000      -0.085      -0.073\n==============================================================================\nOmnibus:                       19.658   Durbin-Watson:                   0.012\nProb(Omnibus):                  0.000   Jarque-Bera (JB):               16.654\nSkew:                          -0.192   Prob(JB):                     0.000242\nKurtosis:                       2.653   Cond. No.                         21.5\n==============================================================================\n\nNotes:\n[1] Standard Errors are heteroscedasticity and autocorrelation robust (HAC) using 1 lags and without small sample correction\n```\n:::\n:::\n\n\nThey obtained that the coefficient on the CAPE ratio is highly significant. Furthermore, the $R^2$ is 35\\%, indicating that the CAPE ratio explains more than a third of the variation of 10-year real equity returns. Using this regression, they are able to estimate and predict returns. \n\n## Conclusion\n\nThis example shows how the CAPE ratio can be used to predict future stock returns. However, it has some limitations. Critics of the CAPE ratio contend that it is not very useful since it is inherently backward-looking, rather than forward-looking. Another issue is that the ratio relies on GAAP (generally accepted accounting principles) earnings, which have undergone marked changes in recent years.\n\nIn June 2016, Jeremy Siegel of the Wharton School published a paper in which he said that forecasts of future equity returns using the CAPE ratio might be overly pessimistic because of changes in the way GAAP earnings are calculated. Siegel said that using consistent earnings data such as operating earnings or NIPA (national income and product account) after-tax corporate profits, rather than GAAP earnings, improves the forecasting ability of the CAPE model and forecasts higher U.S. equity returns.\n\n",
    "supporting": [
      "schiller_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}